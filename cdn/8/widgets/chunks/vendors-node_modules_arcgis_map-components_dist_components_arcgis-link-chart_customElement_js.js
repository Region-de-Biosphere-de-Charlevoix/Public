"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_components_arcgis-link-chart_customElement_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/components/arcgis-link-chart/customElement.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/components/arcgis-link-chart/customElement.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArcgisLinkChart: () => (/* binding */ _)
/* harmony export */ });
/* harmony import */ var _chunks_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunks/runtime.js */ "./node_modules/@arcgis/map-components/dist/chunks/runtime.js");
/* harmony import */ var _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/components-controllers/accessor */ "./node_modules/@arcgis/components-controllers/dist/accessor/index.js");
/* harmony import */ var _arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/reactiveUtils.js */ "@arcgis/core/core/reactiveUtils.js");
/* harmony import */ var _arcgis_core_views_LinkChartView_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/views/LinkChartView.js */ "@arcgis/core/views/LinkChartView.js");
/* harmony import */ var _arcgis_core_WebLinkChart_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/WebLinkChart.js */ "@arcgis/core/WebLinkChart.js");
/* harmony import */ var _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/lumina */ "./node_modules/@arcgis/lumina/dist/index.js");
/* harmony import */ var _chunks_component_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../chunks/component-utils.js */ "./node_modules/@arcgis/map-components/dist/chunks/component-utils.js");
/* harmony import */ var _lit_reactive_element_css_tag_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lit/reactive-element/css-tag.js */ "./node_modules/@lit/reactive-element/development/css-tag.js");








/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const u = (0,_lit_reactive_element_css_tag_js__WEBPACK_IMPORTED_MODULE_7__.css)`@layer{.arcgis-link-chart{padding:0;margin:0;height:100%;width:100%}}`, f = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.makeAccessorController)(
  _arcgis_core_WebLinkChart_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  /**
   * Since omitProps is only needed for typing, not runtime, `{} as { ... }` is
   * a hack to remove them from the runtime code. This argument is not used at
   * all at runtime. For makeViewModelController and makeWidgetController, the
   * minifier is able to remove them automatically. However, minifier does not
   * remove them for makeAccessorController as makeAccessorController is defined
   * in an externalized package.
   */
  {}
), V = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.makeAccessorController)(_arcgis_core_views_LinkChartView_js__WEBPACK_IMPORTED_MODULE_3__["default"], {});
class _ extends _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.LitElement {
  constructor() {
    super(...arguments), this._center = void 0, this._extent = void 0, this._itemId = void 0, this._scale = void 0, this._viewpoint = void 0, this._zoom = void 0, this._map = f(this, {
      editConstructorProperties: this._editMapProperties
    }), this.view = V(this, { editConstructorProperties: this._editViewProperties }), this.allLayerViews = this.view.allLayerViews, this.autoDestroyDisabled = !1, this.background = this.view.background, this.basemap = this._map.basemap, this.basemapView = this.view.basemapView, this.constraints = this.view.constraints, this.displayFilterDisabled = this.view.displayFilterEnabled, this.fatalError = this.view.fatalError, this.graphics = this.view.graphics, this.highlights = this.view.highlights, this.layerViews = this.view.layerViews, this.magnifier = this.view.magnifier, this.map = this.view.map, this.navigation = this.view.navigation, this.padding = this.view.padding, this.popup = this.view.popup, this.popupDisabled = this.view.popupEnabled, this.ready = this.view.ready, this.resizeAlign = this.view.resizeAlign, this.resolution = this.view.resolution, this.rotation = this.view.rotation, this.spatialReference = this.view.spatialReference, this.suspended = this.view.suspended, this.theme = this.view.theme, this.timeExtent = this.view.timeExtent, this.timeZone = this.view.timeZone, this.updating = this.view.updating, this.arcgisViewChange = (0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.createEvent)(), this.arcgisViewClick = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "click"), this.arcgisViewDoubleClick = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "double-click"), this.arcgisViewDrag = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "drag"), this.arcgisViewHold = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "hold"), this.arcgisViewImmediateClick = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "immediate-click"), this.arcgisViewImmediateDoubleClick = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "immediate-double-click"), this.arcgisViewKeyDown = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "key-down"), this.arcgisViewKeyUp = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "key-up"), this.arcgisViewLayerviewCreate = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "layerview-create"), this.arcgisViewLayerviewCreateError = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "layerview-create-error"), this.arcgisViewLayerviewDestroy = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "layerview-destroy"), this.arcgisViewMouseWheel = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "mouse-wheel"), this.arcgisViewPointerDown = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "pointer-down"), this.arcgisViewPointerEnter = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "pointer-enter"), this.arcgisViewPointerLeave = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "pointer-leave"), this.arcgisViewPointerMove = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "pointer-move"), this.arcgisViewPointerUp = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.reEmitEvent)(() => this.view, "pointer-up"), this.arcgisViewReadyChange = (0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.createEvent)();
  }
  static {
    this.properties = { _map: 16, view: 32, allLayerViews: 0, autoDestroyDisabled: 5, background: 0, basemap: 1, basemapView: 0, center: 1, constraints: 0, displayFilterDisabled: 5, extent: 0, fatalError: 0, graphics: 0, highlights: 0, interacting: 32, itemId: 3, layerViews: 0, magnifier: 0, map: 0, navigating: 32, navigation: 0, padding: 0, popup: 0, popupDisabled: 5, ready: 4, resizeAlign: 1, resolution: 8, rotation: 9, scale: 9, spatialReference: 0, stationary: 32, suspended: 7, theme: 0, timeExtent: 0, timeZone: 1, updating: 7, viewpoint: 0, zoom: 9 };
  }
  static {
    this.shadowRootOptions = _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.noShadowRoot;
  }
  static {
    this.styles = u;
  }
  /**
   * Represents the view's center point; when setting the center, you may pass a
   * esri/geometry/Point instance or a string representing
   * a longitude/latitude pair (`"-100.4593, 36.9014"`).
   * Setting the center immediately changes the current view.
   * For animating the view, see this component's goTo() method.
   */
  get center() {
    return this.view.center ?? this._center;
  }
  set center(i) {
    const e = (0,_chunks_component_utils_js__WEBPACK_IMPORTED_MODULE_6__.e)(i, this.ready ? this.view : void 0);
    e && (this.ready && (this.view.center = e), this._center = e);
  }
  /**
   * The extent represents the visible portion of a link chart within the view as an instance of
   * [Extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html).
   * Setting the extent immediately changes the view without animation. To animate
   * the view, see this component's goTo() method.
   * When the view is rotated, the extent does not update to include the newly visible portions of the link chart.
   */
  get extent() {
    return this.view.extent ?? this._extent;
  }
  set extent(i) {
    this.view.ready && !this.extent?.equals(i) && (this.view.extent = i), this._extent = i;
  }
  /** Indication whether the view is being interacted with (for example when panning or by an interactive tool). */
  get interacting() {
    return this.view.interacting;
  }
  /** The ID of a WebLinkChart from an ArcGIS Enterprise portal.
   *
   * To configure the portal url you must set the [`portalUrl` property on `config`](https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#portalUrl) before the `arcgis-linkchart` component loads.
   */
  get itemId() {
    return this._map.portalItem?.id ?? this._itemId;
  }
  set itemId(i) {
    this._itemId = i, this.ready && _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.accessorSupport.reCreate(this._map, this).then(() => {
      this.view.map = this._map;
    }).catch(console.error);
  }
  /** Indication whether the view is being navigated (for example when panning). */
  get navigating() {
    return this.view.navigating;
  }
  /**
   * Represents the link chart scale at the center of the view. Setting the scale immediately changes the view. For animating
   * the view, see this component's goTo() method.
   */
  get scale() {
    return this.view.scale ?? this._scale;
  }
  set scale(i) {
    this.ready && (this.view.scale = i), this._scale = i;
  }
  /** Indication whether the view is animating, being navigated with or resizing. */
  get stationary() {
    return this.view.stationary;
  }
  /**
   * Represents the current view as a Viewpoint or point of observation on the view.
   * Setting the viewpoint immediately changes the current view. For animating
   * the view, see this component's goTo() method.
   */
  get viewpoint() {
    return this.view.viewpoint ?? this._viewpoint;
  }
  set viewpoint(i) {
    this.ready && (0,_chunks_component_utils_js__WEBPACK_IMPORTED_MODULE_6__.i)(this.viewpoint, i) && (this.view.viewpoint = i), this._viewpoint = i;
  }
  /**
   * Represents the level of detail (LOD) at the center of the view.
   * A zoom level (or scale) is a number that defines how large or small the contents of a link chart appear in a link chart view.
   * Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values.
   * A value of -1 means the view has no LODs.
   * When setting the zoom value, the LinkChartView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number.
   * LinkChartView can display link charts with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.
   *
   * Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method.
   * Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
   */
  get zoom() {
    return this.view.zoom ?? this._zoom;
  }
  set zoom(i) {
    this.ready && (this.view.zoom = i), this._zoom = i;
  }
  //#endregion
  //#region Public Methods
  /** Adds a layer to the layers collection. */
  async addLayer(i, e) {
    this.map?.add(i, e);
  }
  /** Adds a layer or array of layers to the layers collection. */
  async addLayers(i, e) {
    this.map?.addMany(i, e);
  }
  /** Closes the popup. */
  async closePopup() {
    this.view?.closePopup();
  }
  /** Destroys the view, and any associated resources, including its map, popup, and UI elements. */
  async destroy() {
    await this.manager.destroy();
  }
  /** Sets the view to a given target. */
  async goTo(i, e) {
    return await this.view?.goTo(i, e);
  }
  /**
   * Opens the popup at the given location with content defined either explicitly with content or driven
   * from the PopupTemplate of input features.
   */
  async openPopup(i) {
    await this.view?.openPopup(i);
  }
  toMap(i) {
    return this.view.toMap(i);
  }
  toScreen(i, e) {
    return this.view.toScreen(i, e);
  }
  /** Call this method to clear any fatal errors resulting from a lost WebGL context. */
  async tryFatalErrorRecovery() {
    this.view?.tryFatalErrorRecovery();
  }
  /** Gets the LayerView created on the view for the given layer. */
  async whenLayerView(i) {
    return await this.view?.whenLayerView(i);
  }
  //#endregion
  //#region Lifecycle
  load() {
    this.el.childElem = document.createElement("div"), this.el.childElem.classList.add("arcgis-link-chart"), this.el.append(this.el.childElem), this.view.container ??= this.el.childElem;
  }
  loaded() {
    this.manager.onLifecycle(() => [
      (0,_arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_2__.watch)(() => this.view.stationary, () => {
        this.arcgisViewChange.emit();
      }, { initial: !0 }),
      (0,_arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_2__.watch)(() => this.view.ready, () => {
        this.arcgisViewReadyChange.emit();
      }, { initial: this.view.ready })
    ]);
  }
  //#endregion
  //#region Private Methods
  _editMapProperties(i) {
    this.map && (this._map = this.map), this.itemId ? i.portalItem = { id: this.itemId } : this.basemap ? this.basemap === "none" && (i.basemap = void 0, this.basemap = null) : i.basemap = "topo-vector";
    const { basemap: e, ...n } = i;
    e || (i = n);
    const { ground: o, ...w } = i;
    return o || (i = w), i;
  }
  async _editViewProperties(i) {
    await this.manager.use(this._map), this.view.ui || (i.ui = {
      components: ["attribution"]
    }), i.map ??= this._map;
    const e = (0,_chunks_component_utils_js__WEBPACK_IMPORTED_MODULE_6__.e)(this.center, void 0);
    return e && (i.center = e), this.viewpoint && (i.viewpoint = this.viewpoint), this.scale !== void 0 && (i.scale = this.scale), this.extent && (i.extent = this.extent), this.zoom !== void 0 && (i.zoom = this.zoom), i;
  }
}
(0,_chunks_runtime_js__WEBPACK_IMPORTED_MODULE_0__.c)("arcgis-link-chart", _);



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,