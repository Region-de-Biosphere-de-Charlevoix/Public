"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["node_modules_arcgis_map-components_dist_components_arcgis-layer-list_customElement_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/chunks/useWidget.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/chunks/useWidget.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ P)
/* harmony export */ });
/* harmony import */ var _arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcgis/components-controllers */ "./node_modules/@arcgis/components-controllers/dist/index.js");
/* harmony import */ var _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/components-controllers/accessor */ "./node_modules/@arcgis/components-controllers/dist/accessor/index.js");
/* harmony import */ var _component_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component-utils.js */ "./node_modules/@arcgis/map-components/dist/chunks/component-utils.js");



/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const P = (d, s) => (i, e) => _(i, d, e);
class y extends _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.AccessorController {
  constructor(s, i, e) {
    super(s, i, e), this._watchedViewModelProperties = /* @__PURE__ */ new Map(), this._watchedVisibleElementsProperties = {}, this._isBindingViewModel = { value: !0 }, Object.defineProperty(this.exports, "viewModel", {
      value: _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.accessorSupport.makeGetterProxy(s, this._watchedViewModelProperties, this._isBindingViewModel)
    }), Object.defineProperty(this.exports, "visibleElements", {
      value: this._makeVisibleElementsBinder()
    });
  }
  hostConnected() {
    super.hostConnected(), this._isBindingViewModel.value = !1, this.component.manager.loadedCalled && (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.component);
  }
  async hostLoad() {
    if (this._watchedProperties.delete("viewModel"), await super.hostLoad(), this.component.manager.destroyed)
      return;
    this._watchMetaProperties(), this.onLifecycle(() => this.reactiveUtils.watch(() => this._instance.viewModel, (e) => {
      this.component.viewModel = e;
    }, { initial: !0 }));
    const s = this._instance.viewModel;
    typeof s == "object" && (_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.accessorSupport.watchComponentUpdates(this, s, this._watchedViewModelProperties), _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.accessorSupport.watchAccessorUpdates(this, s, this._watchedViewModelProperties));
    const i = Object.entries(this._watchedVisibleElementsProperties);
    i.length > 0 && this.onLifecycle(() => i.map(([e, t]) => {
      let n = this._instance.visibleElements ?? {}, o;
      for (const c of t.slice(0, -1))
        if (typeof n[c] == "object" && n[c] !== null)
          n = n[c];
        else {
          o = !!n[c];
          break;
        }
      o === void 0 && (o = !!(n[t.slice(-1)[0]] ?? !0)), e.startsWith("hide");
      const m = e.startsWith("hide") || e.startsWith("show") ? e.startsWith("hide") : o, h = this.component;
      return typeof h[e] == "boolean" ? this._updateWidgetVisibleElement(t, h[e], m) : h[e] = !1, (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.watch)(this.component, e, (c) => this._updateWidgetVisibleElement(t, c, m));
    }));
  }
  _updateWidgetVisibleElement(s, i, e) {
    let t = this._instance.visibleElements ?? {};
    for (const o of s.slice(0, -1))
      (typeof t[o] != "object" || t[o] === null) && (t[o] = {}), t = t[o];
    const n = !!(e ? !i : i);
    t[s.at(-1)] = n;
  }
  hostLoaded() {
    const { el: s } = this.component;
    s.childElem ??= document.createElement("div"), this._instance.container = s.childElem;
    let i = !1;
    const e = this.component.el.view;
    Object.defineProperty(this.component.el, "view", {
      get: () => this._instance.view ?? this._instance.viewModel?.view,
      set: (t) => {
        !("view" in this._instance) && typeof this._instance.viewModel == "object" ? this._instance.viewModel.view = t : this._instance.view = t, !("map" in this._instance) && typeof this._instance.viewModel == "object" ? this._instance.viewModel.map = t.map : this._instance.map = t.map, this._watchViewDestroy(), t && !i && (i = !0, this.component.arcgisReady.emit());
      },
      configurable: !0,
      enumerable: !0
    }), e && (this._instance.view = e), this.component.el.isConnected && ((0,_component_utils_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.component), this._watchViewDestroy());
  }
  hostDisconnected() {
    typeof this.component.el.childElem == "object" && this.component.el.view?.ui?.remove(this.component.el.childElem);
  }
  hostDestroy() {
    super.hostDestroy(), this._watchViewDestroyHandle?.remove();
  }
  _watchMetaProperties() {
    (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.watch)(this.component, "position", (s) => {
      this.component.el.childElem != null && typeof s == "string" && (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.component);
    }), (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.watch)(this.component, "referenceElement", () => (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.component));
  }
  _makeVisibleElementsBinder() {
    return new Proxy({}, {
      has: (s, i) => typeof i == "string" || Reflect.has(s, i),
      get: (s, i) => {
        if (typeof i == "symbol" || i in Promise.prototype)
          return Reflect.get(s, i);
        const e = [i], t = this._makeRecursiveProxy(e);
        return (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.trackPropKey)(this.component, (n) => {
          const o = n;
          this.component[o] = !1, this._watchedVisibleElementsProperties[o] = e;
        }, t);
      }
    });
  }
  _makeRecursiveProxy(s) {
    const i = new Proxy({}, {
      get: (e, t) => {
        const n = Reflect.get(e, t);
        return typeof t == "symbol" || t in Promise.prototype ? n : (s.push(t), i);
      }
    });
    return i;
  }
  /**
   * Destroy the component if view gets destroyed.
   *
   * When view is destroyed, component disconnect is triggered, which will
   * destroy the component in 1s but that can be too late, because in the
   * meanwhile, a watcher on the widget/viewModel instance may get triggered,
   * and throw an error if it's not able to access this.view.map or etc
   * (happens in VersionManagementViewModel for example).
   *
   * We can't check for this in disconnectedCallback though as, if the entire
   * component tree is removed, the disconnect for the component will be
   * triggered before that of arcgis-map, so the view might not be destroyed
   * yet at that point.
   */
  _watchViewDestroy() {
    this._watchViewDestroyHandle?.remove(), this._watchViewDestroyHandle = this.reactiveUtils.when(() => this.component.el.view?.destroyed === !0, () => void this.component.destroy().catch(console.error), { sync: !0 });
  }
}
const _ = (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.proxyExports)(y);



/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/components/arcgis-layer-list/customElement.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/components/arcgis-layer-list/customElement.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArcgisLayerList: () => (/* binding */ m)
/* harmony export */ });
/* harmony import */ var _chunks_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunks/runtime.js */ "./node_modules/@arcgis/map-components/dist/chunks/runtime.js");
/* harmony import */ var _arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/components-controllers */ "./node_modules/@arcgis/components-controllers/dist/index.js");
/* harmony import */ var _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/components-controllers/accessor */ "./node_modules/@arcgis/components-controllers/dist/accessor/index.js");
/* harmony import */ var _arcgis_core_widgets_LayerList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/widgets/LayerList.js */ "@arcgis/core/widgets/LayerList.js");
/* harmony import */ var _arcgis_lumina__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/lumina */ "./node_modules/@arcgis/lumina/dist/index.js");
/* harmony import */ var _chunks_useWidget_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../chunks/useWidget.js */ "./node_modules/@arcgis/map-components/dist/chunks/useWidget.js");
/* harmony import */ var _lit_reactive_element_css_tag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lit/reactive-element/css-tag.js */ "./node_modules/@lit/reactive-element/development/css-tag.js");







/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const g = (0,_lit_reactive_element_css_tag_js__WEBPACK_IMPORTED_MODULE_6__.css)`@layer{arcgis-layer-list{display:block}}`, c = (0,_chunks_useWidget_js__WEBPACK_IMPORTED_MODULE_5__.m)(_arcgis_core_widgets_LayerList_js__WEBPACK_IMPORTED_MODULE_3__["default"]);
class m extends _arcgis_lumina__WEBPACK_IMPORTED_MODULE_4__.LitElement {
  constructor() {
    super(...arguments), this.widget = c(this), this.viewModel = this.widget.viewModel, this.autoDestroyDisabled = !1, this.catalogOptions = this.widget.catalogOptions, this.collapsed = this.widget.collapsed, this.dragEnabled = this.widget.dragEnabled, this.filterPlaceholder = this.widget.filterPlaceholder, this.filterPredicate = this.widget.filterPredicate, this.filterText = this.widget.filterText, this.headingLevel = this.widget.headingLevel, this.hideCatalogLayerList = this.widget.visibleElements.catalogLayerList, this.hideFlow = this.widget.visibleElements.flow, this.hideStatusIndicators = this.widget.visibleElements.statusIndicators, this.icon = this.widget.icon, this.knowledgeGraphOptions = this.widget.knowledgeGraphOptions, this.label = this.widget.label, this.listItemCreatedFunction = this.widget.listItemCreatedFunction, this.minDragEnabledItems = this.widget.minDragEnabledItems, this.minFilterItems = this.widget.minFilterItems, this.openedLayers = this.widget.openedLayers, this.position = "bottom-left", this.selectedItems = this.widget.selectedItems, this.selectionMode = this.widget.selectionMode, this.showCloseButton = this.widget.visibleElements.closeButton, this.showCollapseButton = this.widget.visibleElements.collapseButton, this.showErrors = this.widget.visibleElements.errors, this.showFilter = this.widget.visibleElements.filter, this.showHeading = this.widget.visibleElements.heading, this.showTemporaryLayerIndicators = this.widget.visibleElements.temporaryLayerIndicators, this.state = this.viewModel.state, this.visibilityAppearance = this.widget.visibilityAppearance, this.arcgisPropertyChange = (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_1__.usePropertyChange)()("state"), this.arcgisReady = (0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_4__.createEvent)(), this.arcgisTriggerAction = (0,_arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_2__.reEmitEvent)(() => this.widget, "trigger-action");
  }
  static {
    this.properties = { autoDestroyDisabled: 5, catalogLayerList: 32, catalogOptions: 0, collapsed: 7, dragEnabled: 5, filterPlaceholder: 1, filterPredicate: 0, filterText: 1, headingLevel: 9, hideCatalogLayerList: 5, hideFlow: 5, hideStatusIndicators: 5, icon: 1, knowledgeGraphOptions: 0, label: 1, listItemCreatedFunction: 0, minDragEnabledItems: 9, minFilterItems: 9, openedLayers: 0, operationalItems: 32, position: 1, referenceElement: 1, selectedItems: 0, selectionMode: 1, showCloseButton: 5, showCollapseButton: 5, showErrors: 5, showFilter: 5, showHeading: 5, showTemporaryLayerIndicators: 5, state: 3, tableList: 32, visibilityAppearance: 1 };
  }
  static {
    this.shadowRootOptions = _arcgis_lumina__WEBPACK_IMPORTED_MODULE_4__.noShadowRoot;
  }
  static {
    this.styles = g;
  }
  /** The CatalogLayerList that displays a catalog layer's dynamic group layer. */
  get catalogLayerList() {
    return this.widget.catalogLayerList;
  }
  /** A collection of ListItems representing operational layers. */
  get operationalItems() {
    return this.widget.operationalItems;
  }
  /** The TableList that displays the tables associated with a KnowledgeGraphLayer. */
  get tableList() {
    return this.widget.tableList;
  }
  // #endregion
  // #region Public Methods
  /** Permanently destroy the component */
  async destroy() {
    await this.manager.destroy();
  }
  async triggerAction(t, e) {
    this.widget?.triggerAction(t, e);
  }
}
(0,_chunks_runtime_js__WEBPACK_IMPORTED_MODULE_0__.c)("arcgis-layer-list", m);



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,