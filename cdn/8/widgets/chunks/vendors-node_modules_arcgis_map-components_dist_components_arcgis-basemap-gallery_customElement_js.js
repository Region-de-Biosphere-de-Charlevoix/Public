"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_map-components_dist_components_arcgis-basemap-gallery_customElement_js"],{

/***/ "./node_modules/@arcgis/map-components/dist/chunks/basemap-gallery-resources.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/chunks/basemap-gallery-resources.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ t)
/* harmony export */ });
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const e = "esri-basemap-gallery", t = {
  base: e,
  sourceLoading: `${e}--source-loading`,
  // When set, the items are be displayed in a grid instead of stacked vertically.
  layoutGrid: `${e}--grid`,
  // When set, the thumbnail of each item is narrower, to allow the title to be wider.
  narrowItems: `${e}--narrow-items`,
  loader: `${e}__loader`,
  item: `${e}__item`,
  itemContainer: `${e}__item-container`,
  itemContent: `${e}__item-content`,
  itemTitle: `${e}__item-title`,
  itemTagsContainer: `${e}__item-tags-container`,
  itemThumbnail: `${e}__item-thumbnail`,
  selectedItem: `${e}__item--selected`,
  itemError: `${e}__item--error`
};



/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/chunks/globalCss.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/chunks/globalCss.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ e)
/* harmony export */ });
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const e = {
  anchor: "esri-widget__anchor",
  anchorDisabled: "esri-widget__anchor--disabled",
  button: "esri-button",
  buttonDisabled: "esri-button--disabled",
  buttonHalf: "esri-button--half",
  buttonSecondary: "esri-button--secondary",
  buttonSmall: "esri-button--small",
  buttonTertiary: "esri-button--tertiary",
  buttonThird: "esri-button--third",
  disabled: "esri-disabled",
  disabledElement: "esri-disabled-element",
  empty: "esri-widget__content--empty",
  emptyIllustration: "esri-widget__content-illustration--empty",
  heading: "esri-widget__heading",
  hidden: "esri-hidden",
  input: "esri-input",
  interactive: "esri-interactive",
  loader: "esri-widget__loader",
  loaderAnimation: "esri-widget__loader-animation",
  loaderText: "esri-widget__loader-text",
  menu: "esri-menu",
  menuHeader: "esri-menu__header",
  menuItem: "esri-menu__list-item",
  menuItemActive: "esri-menu__list-item--active",
  menuItemFocus: "esri-menu__list-item--focus",
  menuList: "esri-menu__list",
  noBookmarksIcon: "esri-widget__no-bookmark-icon",
  panel: "esri-widget--panel",
  panelHeightOnly: "esri-widget--panel-height-only",
  primaryTick: "primary-tick",
  primaryTickAmPm: "primary-tick__ampm",
  primaryTickLabel: "primary-tick__label",
  rotating: "esri-rotating",
  secondaryTick: "secondary-tick",
  select: "esri-select",
  table: "esri-widget__table",
  ui: "esri-component",
  widget: "esri-widget esri-component",
  widgetButton: "esri-widget--button",
  widgetButtonActive: "esri-widget--button-active",
  widgetDisabled: "esri-widget--disabled"
};



/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/chunks/useView.js":
/*!********************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/chunks/useView.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ v),
/* harmony export */   a: () => (/* binding */ _),
/* harmony export */   u: () => (/* binding */ E)
/* harmony export */ });
/* harmony import */ var _arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcgis/components-controllers */ "./node_modules/@arcgis/components-controllers/dist/index.js");
/* harmony import */ var _runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runtime.js */ "./node_modules/@arcgis/map-components/dist/chunks/runtime.js");
/* harmony import */ var _arcgis_core_applications_Components_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/applications/Components/reactiveUtils.js */ "@arcgis/core/applications/Components/reactiveUtils.js");
/* harmony import */ var _arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/core/reactiveUtils.js */ "@arcgis/core/core/reactiveUtils.js");
/* harmony import */ var _component_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-utils.js */ "./node_modules/@arcgis/map-components/dist/chunks/component-utils.js");





/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const E = (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.makeT9nController)(_runtime_js__WEBPACK_IMPORTED_MODULE_1__.g), _ = (s) => u(s);
class v extends _arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.GenericController {
  constructor(e) {
    super(e), this._view$ = (0,_arcgis_core_applications_Components_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_2__.signal)(void 0), this._viewDestroyHandle = void 0, this._arcgisReadyEmitted = !1;
    const { el: t } = e, r = t.view;
    this.setProvisionalExports(void 0), Object.defineProperty(t, "view", {
      get: () => this._view$.value,
      set: (o) => {
        if (this.exports === o)
          return;
        const c = t.view;
        this._view$.value = o, this.exports = o, this.component.requestUpdate("view", c), !this._arcgisReadyEmitted && o != null && (this._arcgisReadyEmitted = !0, this.component.arcgisReady.emit());
      },
      configurable: !0,
      enumerable: !0
    }), e !== t && Object.defineProperty(e, "view", {
      get: () => t.view,
      set: (o) => {
        t.view = o;
      }
    }), queueMicrotask(() => {
      r && (t.view = r);
    });
  }
  hostConnected() {
    this._viewDestroyHandle ??= _arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_3__.when(
      () => this._view$.value?.destroyed,
      () => void this.component.destroy?.().catch(console.error),
      { sync: !0 }
    ), this.component.manager.loadedCalled && (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_4__.a)(this.component);
  }
  hostLoad() {
    this.component.manager.destroyed || this._watchMetaProperties();
  }
  hostLoaded() {
    const { el: e } = this.component, t = e.shadowRoot?.firstElementChild ?? e.firstElementChild ?? void 0;
    e.childElem = t ?? e.childElem, e.isConnected && (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_4__.a)(this.component);
  }
  hostDisconnected() {
    typeof this.component.el.childElem == "object" && this._view$.value?.ui?.remove(this.component.el.childElem);
  }
  hostDestroy() {
    this._viewDestroyHandle?.remove();
  }
  _watchMetaProperties() {
    (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.watch)(this.component, "position", (e) => {
      this.component.el.childElem != null && typeof e == "string" && (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_4__.a)(this.component);
    }), (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.watch)(this.component, "referenceElement", () => (0,_component_utils_js__WEBPACK_IMPORTED_MODULE_4__.a)(this.component));
  }
}
const u = (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.proxyExports)(v);



/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/chunks/useViewModel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/chunks/useViewModel.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ m)
/* harmony export */ });
/* harmony import */ var _arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcgis/components-controllers */ "./node_modules/@arcgis/components-controllers/dist/index.js");
/* harmony import */ var _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/components-controllers/accessor */ "./node_modules/@arcgis/components-controllers/dist/accessor/index.js");
/* harmony import */ var _useView_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useView.js */ "./node_modules/@arcgis/map-components/dist/chunks/useView.js");



/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
const m = (o, t) => (e, s) => l(e, o, s);
class a extends _arcgis_components_controllers_accessor__WEBPACK_IMPORTED_MODULE_1__.AccessorController {
  constructor() {
    super(...arguments), this.viewController = new _useView_js__WEBPACK_IMPORTED_MODULE_2__.V(this.component), this._viewWatchHandle = void 0;
  }
  async hostLoad() {
    await super.hostLoad(), this._viewWatchHandle = this.reactiveUtils.watch(
      () => this.component.el.view,
      (t) => {
        this._instance.view = t, this._instance.map = t?.map;
      },
      { sync: !0, initial: !0 }
    );
  }
  hostDestroy() {
    this._viewWatchHandle?.remove(), super.hostDestroy();
  }
}
const l = (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_0__.proxyExports)(a);



/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/components/arcgis-basemap-gallery/customElement.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/components/arcgis-basemap-gallery/customElement.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArcgisBasemapGallery: () => (/* binding */ K)
/* harmony export */ });
/* harmony import */ var _chunks_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunks/runtime.js */ "./node_modules/@arcgis/map-components/dist/chunks/runtime.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./node_modules/lit-html/development/lit-html.js");
/* harmony import */ var _arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/components-controllers */ "./node_modules/@arcgis/components-controllers/dist/index.js");
/* harmony import */ var _arcgis_components_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/components-utils */ "./node_modules/@arcgis/components-utils/dist/index.js");
/* harmony import */ var _arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/core/reactiveUtils.js */ "@arcgis/core/core/reactiveUtils.js");
/* harmony import */ var _arcgis_core_widgets_BasemapGallery_BasemapGalleryViewModel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/widgets/BasemapGallery/BasemapGalleryViewModel.js */ "@arcgis/core/widgets/BasemapGallery/BasemapGalleryViewModel.js");
/* harmony import */ var _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/lumina */ "./node_modules/@arcgis/lumina/dist/index.js");
/* harmony import */ var _chunks_useView_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../chunks/useView.js */ "./node_modules/@arcgis/map-components/dist/chunks/useView.js");
/* harmony import */ var _chunks_useViewModel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../chunks/useViewModel.js */ "./node_modules/@arcgis/map-components/dist/chunks/useViewModel.js");
/* harmony import */ var lit_static_html_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lit/static-html.js */ "./node_modules/lit/static-html.js");
/* harmony import */ var _chunks_globalCss_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../chunks/globalCss.js */ "./node_modules/@arcgis/map-components/dist/chunks/globalCss.js");
/* harmony import */ var _chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../chunks/basemap-gallery-resources.js */ "./node_modules/@arcgis/map-components/dist/chunks/basemap-gallery-resources.js");
/* harmony import */ var _lit_reactive_element_css_tag_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @lit/reactive-element/css-tag.js */ "./node_modules/@lit/reactive-element/development/css-tag.js");













/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
function C({ level: o, class: s, children: e }) {
  const i = k(o), t = `h${i}`, a = (0,lit_static_html_js__WEBPACK_IMPORTED_MODULE_8__.unsafeStatic)(t);
  return (0,lit_static_html_js__WEBPACK_IMPORTED_MODULE_8__.html)`<${a} .ariaLevel=${String(i)} class=${(0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.safeClassMap)((0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_12__.classes)(_chunks_globalCss_js__WEBPACK_IMPORTED_MODULE_9__.g.heading, s))} role=heading>${e}</${a}>`;
}
function E(o, s, e) {
  return Math.min(Math.max(o, s), e);
}
function k(o) {
  return E(Math.ceil(o), 1, 6);
}
const S = (0,_lit_reactive_element_css_tag_js__WEBPACK_IMPORTED_MODULE_11__.css)`@layer{arcgis-basemap-gallery{display:block}}`, G = (0,_chunks_useViewModel_js__WEBPACK_IMPORTED_MODULE_7__.m)(_arcgis_core_widgets_BasemapGallery_BasemapGalleryViewModel_js__WEBPACK_IMPORTED_MODULE_4__["default"]), m = {
  // Below this width, items are displayed as a single column and the thumbnail is placed above the title.
  small: 200,
  // Below this width, items are displayed as a single column but with the thumbnail side-by-side
  // with the title. The title is square.
  default: 280,
  // Below this width, items are displayed as in `default`, but the thumbnail has an aspect ratio of 1.5
  // Above this width, items are displayed in a grid.
  wide: 420
};
class K extends _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.LitElement {
  constructor() {
    super(...arguments), this.messages = (0,_chunks_useView_js__WEBPACK_IMPORTED_MODULE_6__.u)({}), this.viewModel = G(this), this._width = 0, this._state = "", this.activeBasemap = this.viewModel.activeBasemap, this.autoDestroyDisabled = !1, this.disabled = !1, this.headingLevel = 2, this.icon = "basemap", this.label = "", this.position = "bottom-left", this.source = this.viewModel.source, this.state = this.viewModel.state, this.arcgisPropertyChange = (0,_arcgis_components_controllers__WEBPACK_IMPORTED_MODULE_2__.usePropertyChange)()("activeBasemap", "state"), this.arcgisReady = (0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.createEvent)();
  }
  static {
    this.properties = { _width: 16, _state: 16, activeBasemap: 0, autoDestroyDisabled: 5, disabled: 7, headingLevel: 9, icon: 1, label: 1, position: 1, referenceElement: 1, source: 0, state: 3 };
  }
  static {
    this.shadowRootOptions = _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.noShadowRoot;
  }
  static {
    this.styles = S;
  }
  //#endregion
  //#region Public Methods
  /** Permanently destroy the component */
  async destroy() {
    await this.manager.destroy();
  }
  //#endregion
  //#region Lifecycle
  loaded() {
    this.manager.onLifecycle(() => [
      (0,_arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_3__.when)(() => this.source, () => {
        this.viewModel.loadSource();
      }, { sync: !0, initial: !0 }),
      (0,_arcgis_core_core_reactiveUtils_js__WEBPACK_IMPORTED_MODULE_3__.watch)(() => this.source.state, () => {
        this._state = this.source.state;
      }, { sync: !0 })
    ]);
    const s = new ResizeObserver((i) => {
      for (const t of i)
        this._width = t.contentRect.width;
    }), e = this.el.childElem;
    e && s.observe(e);
  }
  //#endregion
  //#region Private Methods
  _getRoundRobinIndex(s, e) {
    return (s + e) % e;
  }
  _handleKeyDown(s) {
    const { key: e } = s;
    if (!["ArrowUp", "ArrowDown", "ArrowRight", "ArrowLeft"].includes(e))
      return;
    s.preventDefault();
    const { items: t, activeBasemapIndex: a } = this.viewModel, h = e === "ArrowUp" || e === "ArrowLeft" ? this._getRoundRobinIndex(Math.max(a - 1, -1), t.length) : this._getRoundRobinIndex(a + 1, t.length), c = t.at(h);
    c?.state === "ready" && (this.viewModel.activeBasemap = c.basemap);
  }
  //#endregion
  //#region Rendering
  render() {
    const s = this.source.state === "loading", e = this.disabled || this.state === "disabled", i = this.viewModel.items, t = {
      [_chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__.c.sourceLoading]: s,
      [_chunks_globalCss_js__WEBPACK_IMPORTED_MODULE_9__.g.disabled]: e,
      "esri-component": !0
      // For compatibility with Esri View UI
    }, a = this._width;
    a <= m.small || a >= m.wide ? t[_chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__.c.layoutGrid] = !0 : a < m.default && (t[_chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__.c.narrowItems] = !0);
    const h = s ? (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.html)`<div class=${(0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.safeClassMap)(_chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__.c.loader)}></div>` : null, c = s ? null : i.length > 0 ? (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.html)`<div aria-disabled=${this.disabled ?? _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.nothing} aria-label=${this.label ?? _arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.nothing} class=${(0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.safeClassMap)(_chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__.c.itemContainer)} @keydown=${this._handleKeyDown} role=radiogroup>${i.map((g, w) => (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.html)`<arcgis-basemap-gallery-item .disabled=${e} .item=${g} .itemIndex=${w} .viewModel=${this.viewModel} .messages=${this.messages}></arcgis-basemap-gallery-item>`)}</div>` : (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.html)`<div class=${(0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.safeClassMap)(_chunks_globalCss_js__WEBPACK_IMPORTED_MODULE_9__.g.empty)}>${C({ level: this.headingLevel, children: this.messages.noBasemaps })}</div>`;
    return (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.html)`<div class=${(0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.safeClassMap)((0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_12__.classes)(_chunks_basemap_gallery_resources_js__WEBPACK_IMPORTED_MODULE_10__.c.base, _chunks_globalCss_js__WEBPACK_IMPORTED_MODULE_9__.g.widget, _chunks_globalCss_js__WEBPACK_IMPORTED_MODULE_9__.g.panel, t))} style=${(0,_arcgis_lumina__WEBPACK_IMPORTED_MODULE_5__.safeStyleMap)({
      "--esri-basemap-gallery-small": `${m.small}px`
    })}>${[h, c]}</div>`;
  }
}
(0,_chunks_runtime_js__WEBPACK_IMPORTED_MODULE_0__.c)("arcgis-basemap-gallery", K);



/***/ }),

/***/ "./node_modules/lit-html/development/static.js":
/*!*****************************************************!*\
  !*** ./node_modules/lit-html/development/static.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   html: () => (/* binding */ html),
/* harmony export */   literal: () => (/* binding */ literal),
/* harmony export */   mathml: () => (/* binding */ mathml),
/* harmony export */   svg: () => (/* binding */ svg),
/* harmony export */   unsafeStatic: () => (/* binding */ unsafeStatic),
/* harmony export */   withStatic: () => (/* binding */ withStatic)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lit-html.js */ "./node_modules/lit-html/development/lit-html.js");
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
// Any new exports need to be added to the export statement in
// `packages/lit/src/index.all.ts`.

/**
 * Prevents JSON injection attacks.
 *
 * The goals of this brand:
 *   1) fast to check
 *   2) code is small on the wire
 *   3) multiple versions of Lit in a single page will all produce mutually
 *      interoperable StaticValues
 *   4) normal JSON.parse (without an unusual reviver) can not produce a
 *      StaticValue
 *
 * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but
 * we don't care about the key, so we break ties via (2) and use the empty
 * string.
 */
const brand = Symbol.for('');
/** Safely extracts the string part of a StaticValue. */
const unwrapStaticValue = (value) => {
    if (value?.r !== brand) {
        return undefined;
    }
    return value?.['_$litStatic$'];
};
/**
 * Wraps a string so that it behaves like part of the static template
 * strings instead of a dynamic value.
 *
 * Users must take care to ensure that adding the static string to the template
 * results in well-formed HTML, or else templates may break unexpectedly.
 *
 * Note that this function is unsafe to use on untrusted content, as it will be
 * directly parsed into HTML. Do not pass user input to this function
 * without sanitizing it.
 *
 * Static values can be changed, but they will cause a complete re-render
 * since they effectively create a new template.
 */
const unsafeStatic = (value) => ({
    ['_$litStatic$']: value,
    r: brand,
});
const textFromStatic = (value) => {
    if (value['_$litStatic$'] !== undefined) {
        return value['_$litStatic$'];
    }
    else {
        throw new Error(`Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
    }
};
/**
 * Tags a string literal so that it behaves like part of the static template
 * strings instead of a dynamic value.
 *
 * The only values that may be used in template expressions are other tagged
 * `literal` results or `unsafeStatic` values (note that untrusted content
 * should never be passed to `unsafeStatic`).
 *
 * Users must take care to ensure that adding the static string to the template
 * results in well-formed HTML, or else templates may break unexpectedly.
 *
 * Static values can be changed, but they will cause a complete re-render since
 * they effectively create a new template.
 */
const literal = (strings, ...values) => ({
    ['_$litStatic$']: values.reduce((acc, v, idx) => acc + textFromStatic(v) + strings[idx + 1], strings[0]),
    r: brand,
});
const stringsCache = new Map();
/**
 * Wraps a lit-html template tag (`html` or `svg`) to add static value support.
 */
const withStatic = (coreTag) => (strings, ...values) => {
    const l = values.length;
    let staticValue;
    let dynamicValue;
    const staticStrings = [];
    const dynamicValues = [];
    let i = 0;
    let hasStatics = false;
    let s;
    while (i < l) {
        s = strings[i];
        // Collect any unsafeStatic values, and their following template strings
        // so that we treat a run of template strings and unsafe static values as
        // a single template string.
        while (i < l &&
            ((dynamicValue = values[i]),
                (staticValue = unwrapStaticValue(dynamicValue))) !== undefined) {
            s += staticValue + strings[++i];
            hasStatics = true;
        }
        // If the last value is static, we don't need to push it.
        if (i !== l) {
            dynamicValues.push(dynamicValue);
        }
        staticStrings.push(s);
        i++;
    }
    // If the last value isn't static (which would have consumed the last
    // string), then we need to add the last string.
    if (i === l) {
        staticStrings.push(strings[l]);
    }
    if (hasStatics) {
        const key = staticStrings.join('$$lit$$');
        strings = stringsCache.get(key);
        if (strings === undefined) {
            // Beware: in general this pattern is unsafe, and doing so may bypass
            // lit's security checks and allow an attacker to execute arbitrary
            // code and inject arbitrary content.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            staticStrings.raw = staticStrings;
            stringsCache.set(key, (strings = staticStrings));
        }
        values = dynamicValues;
    }
    return coreTag(strings, ...values);
};
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 *
 * Includes static value support from `lit-html/static.js`.
 */
const html = withStatic(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.html);
/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 *
 * Includes static value support from `lit-html/static.js`.
 */
const svg = withStatic(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.svg);
/**
 * Interprets a template literal as MathML fragment that can efficiently render
 * to and update a container.
 *
 * Includes static value support from `lit-html/static.js`.
 */
const mathml = withStatic(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.mathml);
//# sourceMappingURL=static.js.map

/***/ }),

/***/ "./node_modules/lit/static-html.js":
/*!*****************************************!*\
  !*** ./node_modules/lit/static-html.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   html: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.html),
/* harmony export */   literal: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.literal),
/* harmony export */   mathml: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.mathml),
/* harmony export */   svg: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.svg),
/* harmony export */   unsafeStatic: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.unsafeStatic),
/* harmony export */   withStatic: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.withStatic)
/* harmony export */ });
/* harmony import */ var lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/static.js */ "./node_modules/lit-html/development/static.js");

//# sourceMappingURL=static-html.js.map


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,