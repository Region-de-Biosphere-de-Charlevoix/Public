"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_arcgis_components-controllers_dist_accessor_index_js-node_modules_arcgis-6af1dc"],{

/***/ "./node_modules/@arcgis/components-controllers/dist/accessor/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@arcgis/components-controllers/dist/accessor/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccessorController: () => (/* binding */ AccessorController),
/* harmony export */   accessorSupport: () => (/* binding */ accessorSupport),
/* harmony export */   makeAccessorController: () => (/* binding */ makeAccessorController),
/* harmony export */   reEmitEvent: () => (/* binding */ reEmitEvent)
/* harmony export */ });
/* harmony import */ var _chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-PP2BAVRW.js */ "./node_modules/@arcgis/components-controllers/dist/chunk-PP2BAVRW.js");
/* harmony import */ var _chunk_XKVBN44N_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-XKVBN44N.js */ "./node_modules/@arcgis/components-controllers/dist/chunk-XKVBN44N.js");
/* harmony import */ var _arcgis_core_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core-adapter */ "@arcgis/core-adapter");
/* harmony import */ var _arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/components-utils */ "./node_modules/@arcgis/components-utils/dist/index.js");



// src/accessor/utils.ts

var reactiveUtils;
async function loadReactiveUtils() {
  reactiveUtils ?? (reactiveUtils = (0,_arcgis_core_adapter__WEBPACK_IMPORTED_MODULE_2__.importCoreReactiveUtils)());
  return await reactiveUtils;
}

// src/accessor/useAccessor.ts

var makeAccessorController = (loadAccessor, _options) => (component, options) => proxy(component, loadAccessor, options);
var AccessorController = class extends _chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.GenericController {
  constructor(component, _loadAccessor, _options) {
    super(component);
    this._loadAccessor = _loadAccessor;
    this._options = _options;
    // A mapping from bound component's "prop" name to Accessor instance's "property"
    this._watchedProperties = /* @__PURE__ */ new Map();
    this._isBinding = { value: true };
    this.setProvisionalExports(
      accessorSupport.makeGetterProxy(
        component,
        this._watchedProperties,
        this._isBinding,
        this.constructor.allowedPropNameMismatches
      )
    );
    (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.trackPropKey)(
      component,
      (resolved) => {
        if (resolved) {
          this._instancePropName = resolved;
        }
      },
      this.exports
    );
  }
  hostConnected() {
    this._isBinding.value = false;
  }
  async hostLoad() {
    this.reactiveUtils = await loadReactiveUtils();
    const component = this.component;
    const parameters = this._gatherParameters();
    const finalParameters = this._options?.editConstructorProperties?.call(component, parameters) ?? parameters;
    const awaitedParameters = finalParameters instanceof Promise ? await finalParameters : finalParameters;
    const genericComponent = component;
    const existingInstance = typeof this._instancePropName === "string" ? genericComponent[this._instancePropName] : void 0;
    const hasInstance = existingInstance != null && existingInstance !== this.exports;
    if (hasInstance) {
      this._instance = existingInstance;
      existingInstance.set(awaitedParameters);
    } else {
      this._instance = await this._createInstance(awaitedParameters);
    }
    if (component.manager.destroyed) {
      return;
    }
    accessorSupport.watchComponentUpdates(this, this._instance, this._watchedProperties);
    accessorSupport.watchAccessorUpdates(this, this._instance, this._watchedProperties);
    this.exports = this._instance;
  }
  _gatherParameters() {
    const data = Object.fromEntries(
      Array.from(
        this._watchedProperties,
        ([prop, property]) => [property, this.component[prop]]
      ).filter(([, value]) => value !== void 0)
    );
    const props =  true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)() ? filterWatchedProperties?.(this, data) ?? data : data;
    return props;
  }
  async _createInstance(parameters) {
    if (this._isAccessorConstructor(this._loadAccessor)) {
      return new this._loadAccessor(parameters);
    } else {
      return await this._loadAccessor(parameters);
    }
  }
  _isAccessorConstructor(loader) {
    return "prototype" in loader && "declaredClass" in loader.prototype;
  }
  hostDestroy() {
    if (this._instance) {
      this._instance.destroy();
    }
  }
  async reCreate() {
    this.hostDestroy();
    await this.hostLoad();
  }
};
var proxy = (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.proxyExports)(AccessorController);
var accessorSupport = {
  makeGetterProxy: (component, watchedProperties, isBinding, allowedPropNameMismatches) => new Proxy(
    {},
    {
      /*
       * Without this, makeProvisionalValue() will throw on accessing
       * non-existent prop
       */
      has: (target, prop) => typeof prop === "string" || prop in target,
      get: (target, prop) => {
        const value = Reflect.get(target, prop);
        if (typeof prop === "symbol" || prop in Promise.prototype) {
          return value;
        }
        const hasProp = prop in target;
        const doBinding = isBinding?.value ?? true;
        if (hasProp || !doBinding) {
          return value;
        }
        if (watchedProperties.has(prop)) {
          if ( true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)() && !component.manager.isLit) {
            throw new Error(
              `Tried to bind "${prop.toString()}" prop twice. This might also happen if you are trying to access the accessor instance before ${component.manager.isLit ? "load" : "componentWillLoad"}()`
            );
          }
          return;
        }
        return (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.trackKey)(
          component,
          (resolved) => {
            if ( true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)()) {
              if (resolved === void 0) {
                if (component.manager.isLit) {
                  return;
                }
                throw new Error(
                  `Unable to resolve what property is "${prop.toString()}" being bound too. Check documentation for useAccessor to ensure proper usage. Make sure you are not trying to access the accessor instance before ${component.manager.isLit ? "load" : "componentWillLoad"}()`
                );
              }
              const isFlippingBoolean = resolved.key.toLowerCase().includes("disable");
              const collidesWithNativeProp = prop in HTMLElement.prototype;
              const collidesWithCustomProp = allowedPropNameMismatches?.has(prop) === true;
              if (resolved.key !== prop && !collidesWithNativeProp && !collidesWithCustomProp && !isFlippingBoolean) {
                throw new Error(
                  `Tried to bind "${resolved?.key}" property to "${prop.toString()}" - property names must match`
                );
              }
              if (!resolved.isReactive) {
                throw new Error(
                  component.manager.isLit ? `For two-way binding with Accessor to work, the property on your component must have @property() or @state() decorator. "${prop.toString()}" has neither` : `For two-way binding with Accessor to work, the property on your component must have @Prop() or @State() decorator. "${prop.toString()}" has neither`
                );
              }
            }
            if (resolved !== void 0) {
              watchedProperties.set(resolved.key, prop);
            }
          },
          value
        );
      }
    }
  ),
  // Update Accessor on component prop change
  watchComponentUpdates(controller, instance, watchedProperties) {
    function getter(_value, propName) {
      const propertyName = watchedProperties.get(propName);
      const value = instance[propertyName];
      const flipBoolean = typeof value === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
      return flipBoolean ? !value : value;
    }
    const setter = (newValue, _oldValue, propName) => {
      const propertyName = watchedProperties.get(propName);
      const value = instance[propertyName];
      const flipBoolean = typeof value === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
      const currentValue = flipBoolean ? !value : component.manager.isLit ? value ?? void 0 : value;
      if (currentValue === newValue) {
        return newValue;
      }
      instance[propertyName] = flipBoolean ? !newValue : newValue;
      const finalValue = instance[propertyName];
      return flipBoolean ? !finalValue : finalValue;
    };
    const component = controller.component;
    const internals = component.manager.internals;
    watchedProperties.forEach((_propName, propertyName) => {
      internals.accessorGetter[propertyName] = getter;
      internals.accessorSetter[propertyName] = setter;
    });
  },
  // Update component on Accessor prop change
  watchAccessorUpdates(controller, instance, watchedProperties) {
    const { component } = controller;
    const genericComponent = component;
    const genericInstance = instance;
    const readonlyProps = findReadOnlyAccessorProps(instance);
    if ( true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)()) {
      setReadonlyProps?.(controller, readonlyProps);
    }
    (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.bypassGetter)(
      () => (
        // Careful: Map's forEach callback arguments are (value, key), not (key, value)
        watchedProperties.forEach((propertyName, propName) => {
          if ( true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)() && !(propertyName in instance)) {
            throw new Error(`"${propertyName}" does not exist on the accessor instance`);
          }
          if (readonlyProps.has(propertyName)) {
            return;
          }
          const domValue = genericComponent[propName];
          let modelValue = genericInstance[propertyName];
          if (component.manager.isLit) {
            modelValue ?? (modelValue = void 0);
          }
          const flipBoolean = typeof domValue === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
          const resolvedDomValue = flipBoolean ? !domValue : domValue;
          if (resolvedDomValue != null && modelValue !== resolvedDomValue) {
            genericInstance[propertyName] = resolvedDomValue;
          }
        })
      )
    );
    controller.onLifecycle(() => {
      if (instance.destroyed) {
        return;
      }
      return Array.from(
        watchedProperties,
        ([propName, propertyName]) => controller.reactiveUtils.watch(
          () => genericInstance[propertyName],
          () => {
            const newValue = genericInstance[propertyName];
            const flipBoolean = typeof newValue === "boolean" && propertyName !== propName && propName.toLowerCase().includes("disable");
            const resolvedNewValue = flipBoolean ? !newValue : newValue;
            (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.bypassSetter)(() => {
              genericComponent[propName] = resolvedNewValue;
            });
          },
          { initial: true }
        )
      );
    });
  },
  // REFACTOR: remove this once Stencil is no longer supported
  reEmitAccessorEvents(controller, instance, reactiveUtils2, prefix) {
    const isEvented = "on" in instance && typeof instance.on === "function";
    if (!isEvented) {
      return;
    }
    const toListen = Object.entries(controller.component).map(([key, unknown]) => {
      const value = unknown;
      if (!key.startsWith(prefix) || key === prefix || typeof value !== "object" || value === null || !("emit" in value) || typeof value.emit !== "function") {
        return void 0;
      }
      const emit = value.emit;
      const trimmedEventName = key.slice(prefix.length);
      const camelCaseEventName = (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.camelToKebab)(trimmedEventName);
      const eventName = camelCaseEventName.toLowerCase();
      return [eventName, emit];
    }).filter(_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isNotUndefined);
    if (toListen.length === 0) {
      return;
    }
    const eventTarget = instance;
    const getEventTarget = () => eventTarget;
    controller.onLifecycle(() => {
      if (instance.destroyed) {
        return;
      }
      return toListen.map(([eventName, emit]) => reactiveUtils2.on(getEventTarget, eventName, emit));
    });
  },
  async reCreate(instance, component) {
    const accessorController = component.manager.useRefSync(instance);
    if (accessorController === void 0) {
      if (true) {
        console.error("Unable to resolve the useAccessor controller from the provided value");
      }
      return;
    }
    await accessorController.reCreate();
  }
};
function findReadOnlyAccessorProps(instance) {
  const accessor = instance;
  const properties = Object.entries(accessor.__accessor__?.metadata ?? {});
  return new Set(
    properties.filter(([_property, descriptor]) => descriptor?.readOnly === true).map(([property]) => property)
  );
}
var setReadonlyProps =  true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)() ? (controller, properties) => {
  (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.devOnlySetPersistentControllerData)?.(controller, properties);
} : void 0;
var filterWatchedProperties =  true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)() ? (controller, data) => {
  const readonlyProperties = (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.devOnlyGetPersistentControllerData)?.(controller);
  if (readonlyProperties instanceof Set) {
    return Object.fromEntries(Object.entries(data).filter(([key]) => !readonlyProperties.has(key)));
  }
  return data;
} : void 0;

// src/accessor/reEmitEvent.ts

function reEmitEvent(getEventedAccessor, eventName) {
  const component = (0,_chunk_PP2BAVRW_js__WEBPACK_IMPORTED_MODULE_0__.retrieveComponent)();
  if ( true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)() && !component.manager.isLit) {
    throw new Error(
      "reEmitEvent is only supported in Lumina components. Consult documentation for equivalent Stencil pattern."
    );
  }
  const manager = component.manager;
  const reactiveUtils2 = loadReactiveUtils();
  manager.onLoaded(() => {
    void reactiveUtils2.then(
      (reactiveUtils3) => manager.onLifecycle(() => reactiveUtils3.on(getEventedAccessor, eventName, emitter.emit))
    );
  });
  const emitter = component.constructor.$createEvent();
  if ( true && (0,_arcgis_components_utils__WEBPACK_IMPORTED_MODULE_3__.isEsriInternalEnv)()) {
    if (typeof emitter !== "object" || emitter === null || !("emit" in emitter) || typeof emitter.emit !== "function") {
      throw new Error(`Expected to find $createEvent static property on Lumina's LitElement`);
    }
  }
  return emitter;
}



/***/ }),

/***/ "./node_modules/@arcgis/map-components/dist/chunks/component-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@arcgis/map-components/dist/chunks/component-utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ p),
/* harmony export */   b: () => (/* binding */ P),
/* harmony export */   c: () => (/* binding */ H),
/* harmony export */   d: () => (/* binding */ L),
/* harmony export */   e: () => (/* binding */ O),
/* harmony export */   f: () => (/* binding */ x),
/* harmony export */   i: () => (/* binding */ N),
/* harmony export */   p: () => (/* binding */ u),
/* harmony export */   r: () => (/* binding */ S)
/* harmony export */ });
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
v4.32.1 */
function P(e, i) {
  Array.isArray(i) ? e._watchHandles = [...e._watchHandles, ...i] : e._watchHandles.push(i);
}
function p(e) {
  e.el.childElem && (e.el.childElem.ownedBy = e.el);
  const i = h(e);
  if (!i) {
    const t = y(e.referenceElement);
    if (!t) {
      g(e);
      return;
    }
    return f(t, e, !0), t;
  }
  return w(i, e.el.parent) || (e.el.parent = i, i.tagName.toLowerCase() === "arcgis-expand" ? v(i, e) : i.tagName.toLowerCase() === "arcgis-placement" ? C(i, e) : f(i, e, !1)), i;
}
function h({ el: e }) {
  for (let i = e.parentElement; i; i = i?.parentElement ?? null) {
    if (c.has(i.tagName.toLowerCase()))
      return i;
    if ("ownedBy" in i && i.ownedBy instanceof HTMLElement && c.has(i.ownedBy.tagName.toLowerCase()))
      return i.ownedBy;
  }
}
const c = /* @__PURE__ */ new Set([
  "arcgis-map",
  "arcgis-scene",
  "arcgis-link-chart",
  "arcgis-expand",
  "arcgis-placement"
]);
function w(e, i) {
  if (e !== i)
    return !1;
  const t = e.tagName.toLowerCase();
  return t === "arcgis-expand" || t === "arcgis-placement";
}
function l(e, i, t = "arcgisReady") {
  const r = e;
  if (typeof r.view?.ready == "boolean")
    i(r.view);
  else {
    let s = function(d) {
      d.target === e && (l(e, i, t), e.removeEventListener(t, s));
    };
    e.addEventListener(t, s);
  }
}
const v = (e, i) => l(e, (t) => {
  i.el.childElem && e.content != null && e.content.append(i.el.childElem), e.expandIcon = i.icon || i.widget?.icon || e.expandIcon, i.position = e.position, i.el.view = t;
}), C = (e, i) => l(e, (t) => {
  i.el.childElem && i.el.append(i.el.childElem), i.position = e.position, i.el.view = t;
}), f = (e, i, t) => l(
  e,
  (r) => {
    t ? g(i) : i.el.childElem && E(e, i), i.el.view = r;
  },
  "arcgisViewReadyChange"
);
function E(e, i) {
  const t = i.el.childElem ?? i.el, r = [...e.children], s = {};
  for (const a of r) {
    const n = a.getAttribute("position") ?? "manual";
    s[n] ??= [], s[n].push({ child: a, position: n, index: r.indexOf(a) });
  }
  const d = s[i.position ?? "manual"]?.findIndex(({ child: a }) => a === i.el), o = e.view.ui;
  o.remove(t), o.add(t, { position: i.position, index: d });
}
function L(e) {
  let i = !1, t = e.el.view;
  const r = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(e.el), "view") ?? {
    get: () => t,
    set: (s) => t = s
  };
  Object.defineProperty(e.el, "view", {
    get: r.get.bind(e.el),
    set: (s) => {
      r.set.call(e.el, s), s && !i && (i = !0, e.arcgisReady.emit());
    },
    configurable: !0,
    enumerable: !0
  }), t && (e.el.view = t);
}
function x(e) {
  return e == null || e === "";
}
function H(e, i) {
  return i != null && e?.position === i.position && e?.heading === i.heading && e?.tilt === i.tilt && e?.fov === i.fov;
}
function N(e, i) {
  return i === void 0 || e?.targetGeometry !== i?.targetGeometry || e?.rotation !== i?.rotation || e?.scale !== i?.scale;
}
function O(e, i) {
  return u(i?.center, e);
}
function u(e, i) {
  if (typeof i == "string")
    return u(e, i.split(",").map(Number));
  if (!e)
    return i;
  if (Array.isArray(i)) {
    const t = i[0], r = i[1], s = i.length > 2 ? i[2] : void 0;
    if (t !== e.longitude || r !== e.latitude || s !== e.z)
      return i;
  } else if (i && !e?.equals(i))
    return i;
}
async function S(e, i) {
  i != null && (typeof i == "string" ? e.el.view = await b(i) : e.widget && (e.el.view = i.view));
}
async function b(e) {
  const i = y(e);
  return await new Promise((t) => {
    typeof i?.view?.ready == "boolean" ? t(i.view) : i && i.addEventListener("arcgisViewReadyChange", () => t(i.view), { once: !0 });
  });
}
function g(e) {
  e.el.childElem && (e.el.shadowRoot ?? e.el).append(e.el.childElem);
}
function y(e) {
  return typeof e != "string" ? e ?? void 0 : (e.includes("#") || e.includes(".") || e.includes("[") ? void 0 : document.querySelector(`#${e}`)) ?? document.querySelector(e) ?? void 0;
}



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,